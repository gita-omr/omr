/*******************************************************************************
 * Copyright (c) 2022, 2022 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at http://eclipse.org/legal/epl-2.0
 * or the Apache License, Version 2.0 which accompanies this distribution
 * and is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License, v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception [1] and GNU General Public
 * License, version 2 with the OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

VECTOR_OPERATION_MACRO(\
   /* .opcode               = */ vload, \
   /* .name                 = */ "vload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .opcode               = */ vloadi, \
   /* .name                 = */ "vloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load indirect vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation            = */ vstore, \
   /* .name                 = */ "vstore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation            = */ vstorei, \
   /* .name                 = */ "vstorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store indirect vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation            = */ vnot, \
   /* .name                 = */ "vnot", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector boolean not */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation            = */ vneg, \
   /* .name                 = */ "vneg", \
   /* .properties1          = */ ILProp1::Neg, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector negation */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation            = */ vadd, \
   /* .name                 = */ "vadd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector add */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation            = */ vsub, \
   /* .name                 = */ "vsub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector subtract */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation             = */ vmul, \
   /* .name                 = */ "vmul", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector multiply */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation            = */ vdiv, \
   /* .name                 = */ "vdiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector divide */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation            = */ vand, \
   /* .name                 = */ "vand", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::And, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector logical AND */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation            = */ vor, \
   /* .name                 = */ "vor", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Or, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector logical OR */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation            = */ vxor, \
   /* .name                 = */ "vxor", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Xor, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector exclusive OR integer */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation            = */ vfma, \
   /* .name                 = */ "vfma", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector fused multiply and add */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation            = */ vsplats, \
   /* .name                 = */ "vsplats", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Vector, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector splats */ \
)
